import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

export interface Product {
  id: number
  shopify_id: string
  description: string
  image_url: string
  created_at: string
}

// Define a service using a base URL and expected endpoints
export const productsApi = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://100.127.154.2:5000" }),
  reducerPath: "productsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Products"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getProducts: build.query<Product[], void>({
      query: () => "products",
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error) => [{ type: "Products" }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetProductsQuery } = productsApi
